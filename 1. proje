<!DOCTYPE html>
<html lang="tr">
<head>
<meta charset="UTF-8">
<title>Kaplumbağa Savaşları</title>
<style>
    body { margin:0; background:black; overflow:hidden; }
    canvas { display:block; margin:0 auto; background:black; }
</style>
</head>
<body>
<canvas id="gameCanvas" width="900" height="600"></canvas>
<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const WIDTH = canvas.width;
const HEIGHT = canvas.height;
const PLATFORM_Y = HEIGHT - 100;
const PLATFORM_HEIGHT = 20;

let gameState = "menu"; // menu, select, play
let selectedIndex = 1;

class Turtle {
    constructor(x, color, name) {
        this.x = x;
        this.y = PLATFORM_Y - 50;
        this.color = color;
        this.name = name;
        this.width = 50;
        this.height = 50;
        this.velX = 0;
        this.velY = 0;
        this.onGround = true;
        this.health = 3;
        this.direction = 1;
        this.jCooldown = 0;
        this.kCooldown = 0;
    }
    draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }
    move(keys) {
        this.velX = 0;
        if(keys['a']) { this.velX = -5; this.direction = -1; }
        if(keys['d']) { this.velX = 5; this.direction = 1; }
        if(keys['w'] && this.onGround) { this.velY = -12; this.onGround=false; }
        if(keys['s']) { this.height = 25; } else { this.height = 50; }

        this.x += this.velX;
        this.velY += 0.5;
        this.y += this.velY;
        if(this.y + this.height >= PLATFORM_Y) { this.y = PLATFORM_Y - this.height; this.velY=0; this.onGround=true; }
        if(this.x<0) this.x=0;
        if(this.x+this.width>WIDTH) this.x=WIDTH-this.width;
        if(this.jCooldown>0) this.jCooldown--;
        if(this.kCooldown>0) this.kCooldown--;
    }
}

class Effect {
    constructor(x,y,type,direction,target) {
        this.x=x; this.y=y; this.type=type; this.direction=direction; this.target=target; this.timer=60;
    }
    draw() {
        ctx.fillStyle="white";
        if(this.type=="sword") ctx.fillRect(this.x,this.y,40,10);
        if(this.type=="snake") ctx.fillRect(this.x+20,this.y-20,20,60);
        if(this.type=="tornado") { ctx.beginPath(); ctx.arc(this.x,this.y,40,0,2*Math.PI); ctx.fill(); }
        if(this.type=="lightning") { ctx.strokeStyle="white"; ctx.lineWidth=5; ctx.beginPath(); ctx.moveTo(this.x,0); ctx.lineTo(this.x,HEIGHT); ctx.stroke(); }
        if(this.type=="spear") ctx.fillRect(this.x,this.y,50,10);
        if(this.type=="nunchaku") ctx.fillRect(this.x,this.y,50,10);
        this.timer--;
        return this.timer<=0;
    }
}

let keys = {};
let effects=[];
let player;
let enemies=[];

function drawMenu() {
    ctx.fillStyle="black"; ctx.fillRect(0,0,WIDTH,HEIGHT);
    ctx.fillStyle="yellow"; ctx.fillRect(WIDTH/2-100, HEIGHT/2-50, 200,100);
    ctx.fillStyle="black"; ctx.font="50px Arial";
    ctx.fillText("PLAY", WIDTH/2-50, HEIGHT/2+15);
}

function drawSelect() {
    ctx.fillStyle="black"; ctx.fillRect(0,0,WIDTH,HEIGHT);
    const turtleColors=["blue","gold","purple"];
    const turtleNames=["Purrio","Sanjai","Murriko"];
    for(let i=0;i<3;i++){
        ctx.fillStyle = (i==selectedIndex)? turtleColors[i]: "gray";
        ctx.fillRect(100+i*250,200,50,50);
        ctx.fillStyle="white";
        ctx.font="20px Arial";
        ctx.fillText(turtleNames[i],100+i*250,260);
    }
    ctx.fillStyle = turtleColors[selectedIndex];
    ctx.fillRect(WIDTH/2-50,350,100,100);
}

function drawGame() {
    ctx.fillStyle="black"; ctx.fillRect(0,0,WIDTH,HEIGHT);
    ctx.fillStyle="gray"; ctx.fillRect(0,PLATFORM_Y,WIDTH,PLATFORM_HEIGHT);
    player.draw();
    for(let e of enemies) e.draw();
    for(let ef of effects) { if(ef.draw()) effects.splice(effects.indexOf(ef),1); }
}

document.addEventListener('keydown', e=>{ keys[e.key.toLowerCase()]=true;
if(gameState=="select"){
    if(e.key=="ArrowLeft") selectedIndex=Math.max(0,selectedIndex-1);
    if(e.key=="ArrowRight") selectedIndex=Math.min(2,selectedIndex+1);
    if(e.key.toLowerCase()=="c") { startGame(); }
}});
document.addEventListener('keyup', e=>{ keys[e.key.toLowerCase()]=false; });

canvas.addEventListener('click', e=>{
    if(gameState=="menu"){
        let rect=canvas.getBoundingClientRect();
        let mx=e.clientX-rect.left, my=e.clientY-rect.top;
        if(mx>WIDTH/2-100 && mx<WIDTH/2+100 && my>HEIGHT/2-50 && my<HEIGHT/2+50) gameState="select";
    }
});

function startGame(){
    const colors=["blue","gold","purple"];
    const names=["Purrio","Sanjai","Murriko"];
    player=new Turtle(WIDTH/2, colors[selectedIndex], names[selectedIndex]);
    enemies=[];
    for(let i=0;i<3;i++){ if(i!=selectedIndex) enemies.push(new Turtle(100+i*250,colors[i],names[i])); }
    effects=[];
    gameState="play";
}

function gameLoop(){
    if(gameState=="menu") drawMenu();
    else if(gameState=="select") drawSelect();
    else if(gameState=="play") { player.move(keys); drawGame(); }
    requestAnimationFrame(gameLoop);
}

gameLoop();
</script>
</body>
</html>
